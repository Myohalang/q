Method
일련의 코드를 하나의 이름 아래 묶은 것
객체 지향 프로그래밍에서는 모든 것을 객체로 표현
각 객체는 자신만의 속성(데이터)과 기능(메소드)을 갖고 있는데, 클래스가 객체를  위한 청사진을 제공
그래서 메소드는 클래스 안에서 선언

Call (메소드 호출)
묶은 코드를 메소드의 이름을 불러서 실행할 수 있다

Recursive (재귀 호출)
메소드가 자기 자신을 스스로 호출하는 것
코드를 단순하게 구성할 수 있다는 장점이 있는 한편, 성능에는 나쁜 영향을 줌

메소드를 선언하는 형식
class 클래스의 이름
{
	한정자 반환 형식 메소드의 이름 (매개 변수 목록)
	{
		// 코드
		return 메소드의 결과; (메소드 결과의 데이터 형식은 메소드의 반환 형식과 일치)
	}
}

return (반환)
메소드의 호출자로부터 받은 입력을 결과로 돌려줌

void 반환 형식
결과를 반환하지 않는 메소드에 쓰임

한정자
메소드의 속성을 수식

static 한정자
메소드나 필드가 클래스의 인스턴스가 아닌 클래스 자체에 소속되도록 지정하는 한정자

out (출력 전용 매개 변수)
메소드의 선언부와 호출부에 ref 키워드 대신 out 키워드를 사용
out 키워드를 이용해서 매개 변수를 넘길 때는 메소드가 해당 매개 변수에 결과를 저장하지 않으면 컴파일러가 에러 메시지를 출력
메소드를 호출하는 쪽에서는 초기화를 하지 않은 지역 변수를 메소드의 out 매개 변수로 넘기는 것은 가능
컴파일러가 호출당하는 메소드에서 그 지역 변수를 할당할 것을 보장하기 때문

Method Overloading
하나의 메소드 이름에 여러 개의 구현을 올리는 것

Params (가변길이 매개 변수)
개수가 유연하게 변할 수 있는 매개 변수
반환 형식 메소드의 이름 ( Params 데이터 형식 [] 배열 이름 )

Named Parameter (명명된 매개 변수)
메소드를 호출할때 매개 변수의 이름에 근거해서 데이터를 할당할 수 있는 기능